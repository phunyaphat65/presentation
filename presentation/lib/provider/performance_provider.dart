import 'package:flutter/foundation.dart';
import 'package:collection/collection.dart'; // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö List
import 'package:account/model/performanceItem.dart';
import 'package:account/database/performance_db.dart';

class PerformanceProvider with ChangeNotifier {
  final PerformanceDB _db = PerformanceDB(dbName: 'performances.db');
  List<PerformanceItem> _performances = [];

  List<PerformanceItem> get performances => List.unmodifiable(_performances);

  /// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  Future<void> initData() async {
    try {
      await refreshData();
    } catch (e, stacktrace) {
      debugPrint("‚ùå initData() ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e\n$stacktrace");
    }
  }

  /// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡∏°‡πà
  Future<void> addPerformance(PerformanceItem performance) async {
    try {
      int newID = await _db.insertDatabase(performance);
      if (newID > 0) {
        _performances.add(performance.copyWith(keyID: newID));
        notifyListeners();
        debugPrint("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${performance.title}");
      } else {
        debugPrint("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${performance.title}");
      }
    } catch (e, stacktrace) {
      debugPrint("‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e\n$stacktrace");
    }
  }

  /// ‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ keyID
  Future<void> deletePerformance(int? keyID) async {
    if (keyID == null) {
      debugPrint("‚ùå keyID ‡πÄ‡∏õ‡πá‡∏ô null ‡∏•‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
      return;
    }
    try {
      await _db.deleteData(keyID); // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
      _performances.removeWhere((item) => item.keyID == keyID);
      notifyListeners();
      debugPrint("‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: keyID = $keyID");
    } catch (e, stacktrace) {
      debugPrint("‚ùå ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e\n$stacktrace");
    }
  }

  /// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
  Future<void> updatePerformance(PerformanceItem performance) async {
    if (performance.keyID == null) {
      debugPrint("‚ùå keyID ‡πÄ‡∏õ‡πá‡∏ô null ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
      return;
    }
    try {
      await _db.updateData(performance); // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
      int index = _performances.indexWhere((item) => item.keyID == performance.keyID);
      if (index != -1) {
        _performances[index] = performance;
        notifyListeners();
        debugPrint("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${performance.title}");
      }
    } catch (e, stacktrace) {
      debugPrint("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e\n$stacktrace");
    }
  }

  /// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  Future<void> refreshData() async {
    try {
      List<PerformanceItem> newData = await _db.loadAllData();

      // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô UI
      if (!const DeepCollectionEquality().equals(_performances, newData)) {
        _performances = newData;
        notifyListeners();
        debugPrint("üîÑ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ${newData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
      } else {
        debugPrint("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI");
      }
    } catch (e, stacktrace) {
      debugPrint("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e\n$stacktrace");
    }
  }
}